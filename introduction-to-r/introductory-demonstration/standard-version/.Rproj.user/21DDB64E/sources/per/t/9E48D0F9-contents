# A Complete Example of a Data Analysis Project
The following project provides a basic example of how to organise a 
data analysis project.

Things to note

* The first block of your R markdown file or the first section of your R script 
should do the following actions and in the specified order: 
set options, load packages, import support functions, load data, and 
run data manipulations.

* When you return to your project, you only need to run the first block and 
then you can begin analysing your data again.

* It can be helpful to organise subsequent analyses into discrete 
code chunks.

# Setup 
```{r load_project}
# 1. Set R options 
options(stringsAsFactors = FALSE)

# 2. Load packages
library(psych) # many useful functions including scoring tests, alphas, descriptives
library(readxl) # for importing excel files
library(lavaan) # for cfa and sem
library(lm.beta) # for standardized betas in regression

# 3. Import any suppport functions 
source("support-functions.R")

# 4. Load data
mlq <- read.csv("mlq.csv") # data
meta.mlq <- data.frame(readxl::read_excel("meta.xls")) # meta data

# 5. Run data manipulations
source("data-preparation.R")
```             

Background on data file:
Labels for variables included in file MLQ.TXT

* MBEA 1-3.: Indicators 1-3 for Active Management-by-Exception
* MBEP 1-3: Indicators 1-3 for Passive Management-by-Exception
* CR 1-3: Indicators 1-3 for Contingent Reward
* AC 1-3: Indicators 1-3 for Attributed Charisma
* IS 1-3: Indicators 1-3 for Intellectual Stimulation
* IC 1-3: Indicators 1-3 for Individualized Consideration

Labels for variables included in file MLQ2.TXT

* Acti: Mean score for Active Leadership
* AC: Mean score for Attributed Charisma
* MBEP: Mean score for Passive Management-by-Exception
* CR: Mean score for Contingent Reward
* IC: Mean score for Individualized Consideration
* IS: Mean score for Intellectual Stimulation
* MBEA: Mean score for Active Management-by-Exception
* Extra: Mean score for Extra-effort
* Satld: Mean score for Satisfaction with the Leader
* Jobsat: Mean score for Job Satisfaction
* Goal: Mean score for Goal Attainment
* Retent: Mean score for Staff Retention
* Quit: Mean score for Intent to Leave the Organization
* Acs: Mean score for Affective Commitment
* Alt.w: Mean score for Work-related Altruism
* Alt.nw: Mean score for Nonwork-related Altruism
* Alt.p: Mean score for Patient-related Altruism


# Explore
```{r}
# overview of data
head(mlq) # look at first few rows of the data

head(meta.mlq)

# sample size
nrow(mlq)

# check for missing data
sapply(mlq, function(X) sum(is.na(X)))

# descriptive statistics
psych::describe(mlq)

# a nice plot
pairs.panels(mlq[,c(v$mlq_scales, v$outcome)])
```

# Exploratory factor analysis
```{r}
# check for 6 factors
psych::scree(mlq[,v$mlq_items])
psych::fa.parallel(mlq[,v$mlq_items])

# examine 6 factor EFA
fac1 <- factanal(mlq[,v$mlq_items], 6, rotation = "promax")
print(fac1, cutoff = .30)

fl <- round(unclass(fac1$loadings), 2)
fl

write.csv(fl, "output-efa-factor-loadings.csv")
```


# Confirmatory factor analysis
```{r}
models <- list()
fits <- list()

# paste(v$mlq_items, collapse = " + ")

# one factor model
models$m1 <- 
    'global  =~ mbea1 + mbea2 + mbea3 + mbep1 + mbep2 + mbep3 + 
            cr1 + cr2 + cr3 + ac1 + ac2 + ac3 + 
            is1 + is2 + is3 + ic1 + ic2 + ic3'

# two factor model
models$m2 <- 
    ' transformational =~ ac1 + ac2 + ac3  + is1 + is2 + is3 + ic1 + ic2 + ic3
    transactional =~ mbep1 + mbep2 + mbep3 +mbea1 + mbea2 + mbea3 + cr1 + cr2 + cr3'

# six factor model
models$m3 <- 
    ' mbea =~ mbea1 + mbea2 + mbea3
    mbep =~ mbep1 + mbep2 + mbep3 
    cr =~ cr1 + cr2 + cr3 
    ac =~ ac1 + ac2 + ac3 
    is =~ is1 + is2 + is3
    ic =~ ic1 + ic2 + ic3'

fits$m1 <- lavaan::cfa(models$m1, data = mlq)
fits$m2 <- lavaan::cfa(models$m2, data = mlq)
fits$m3 <- lavaan::cfa(models$m3, data = mlq)


summary(fits$m3, fit.measures = TRUE) 
standardizedSolution(fits$m3)

v$fitindicies <- c("npar",  "chisq", "df", "pvalue", "cfi", "rmsea", 
                 "rmsea.ci.lower", "rmsea.ci.upper", "srmr")

round(sapply(fits, function(X) fitmeasures(X)[v$fitindicies]), 3)
```

# Reliability analysis
```{r}
# Create the scoring key 
# i.e., rows are the items of the scale
# columns are the six scales
# values are 1, -1, or 0 for positively worded, reversed, or not included item
meta.mlq
v$mlq_scales

scorekey <- meta.mlq[,v$mlq_scales]
row.names(scorekey) <- meta.mlq$id
scored <- scoreItems(keys =  scorekey,
           items = mlq[,meta.mlq$id])
round(scored$alpha, 2)
```


# Descriptive Statistics and Correlations
```{r}
desc <- list()
desc$cor <- cor(mlq[,c(v$mlq_scales, "goal")])
desc$mean <- sapply(mlq[,c(v$mlq_scales, "goal")], mean)
desc$sd <- sapply(mlq[,c(v$mlq_scales, "goal")], sd)

desc$tab <- data.frame(mean = desc$mean, sd = desc$sd, desc$cor)

rtab <- round(desc$tab, 2)
rtab
write.csv(rtab, file = "output-rtab.csv")
```


# Regression models
```{r}
# Just transactional 
v$mlq_transactional
v$mlq_transformational
fits <- list()

fits$transactional <- lm(goal ~ mbep + mbea + cr, mlq)
fits$transformational <- lm(goal ~ ac + is + ic, mlq)
fits$all <- lm(goal ~ ac + is + ic + mbep + mbea + cr, mlq)

lapply(fits, summary)
lapply(fits, function(X) summary(X)$adj)

# does adding transactional or transformational add predictions
anova(fits$transactional, fits$all)
anova(fits$transformational, fits$all)
summary(fits$all)
# standardised betas
round(coef(lm.beta::lm.beta(fits$all)),2)
```






