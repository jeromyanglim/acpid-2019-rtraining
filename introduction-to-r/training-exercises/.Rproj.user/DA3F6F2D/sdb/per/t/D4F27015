{
    "contents" : "---\ntitle: \"Introduction to R: Graphics and Data Manipulation Tutorial\"\nauthor: \"Dr Jeromy Anglim\"\noutput: pdf_document\n---\n\n# Initialise Project\n```{r load_project, message = FALSE, warning = FALSE}\nlibrary(ProjectTemplate); load.project()\nlibrary(MASS)\ndata(survey)\ncsurvey <- na.omit(survey)\n```             \n\n# Graphics systesms\nThere are three main graphics packages in R:\n\n* Base graphics\n* lattice\n* ggplot2\n\n# Base graphics\n```{r base graphics}\n# scatterplot\nplot(csurvey$Pulse, csurvey$Age)\nplot(Age ~ Pulse, csurvey)\nplot(csurvey$Pulse)\n\n# distribution\nhist(csurvey$Pulse, 10) # histogram\nstem(csurvey$Pulse) # Stem and leaf plot\nplot(density(csurvey$Pulse)) # density plot\nboxplot(csurvey$Pulse) # box plot\nboxplot(csurvey$Pulse ~ csurvey$Sex) # box plot by group\n\n# categorical variables\nplot(csurvey$Smoke)\nplot(prop.table(table(csurvey$Smoke)))\n\n# plot covariation of multiple numeric variables \npairs( csurvey[, c(\"Wr.Hnd\", \"Pulse\", \"Height\", \"Age\") ])\npsych::pairs.panels( csurvey[, c(\"Wr.Hnd\", \"Pulse\", \"Height\", \"Age\") ])\n```\n\n# Graphics options\n```{r base graphics options}\n# Base graphics uses a \"painting the page metaphor\"\n\n# add options to the main plotting functions\nplot(csurvey$Pulse, csurvey$Age,\n     xlab = \"Pulse\",  # x-axis label\n     ylab = \"Age\",      # y-axis label\n     pch = 2,          # plotting character\n     las = 1,         # orientation of axis labels\n     xlim = c(0, 110), # x axis limits\n     ylim = c(0, 80)   # y axis limits\n)\n\n# overlay different elements\ntitle(\"Pulse by Age\") # add title to top of plot\nabline(h = mean(csurvey$Age), lty = 2, col = \"red\") # add straight line\nabline(v= mean(csurvey$Pulse), lty = 2, col = \"blue\")  # add straight line\ntext(70, 75, \"outlier\") # add text\n\n# There are various graphic parameters like \n# lty for line type\n# col for colour\n# For further information, see\n# http://www.statmethods.net/advgraphs/parameters.html\n?par # built-in help for graphics parameters\n?plot.default # built-in help \n\n\n# Arrange plots in grids\npar(mfrow = c(2, 2)) # create grid of plots with 2 rows and 2 columns\nplot(Pulse ~ Age, csurvey, main = \"Pulse\")\nplot(Wr.Hnd ~ Age, csurvey,  main = \"Writing hand\")\nplot(NW.Hnd ~ Age, csurvey, main = \"Non-writing hand\")\nplot(Height ~ Age, csurvey, main = \"Height\")\npar(mfrow = c(1, 1)) # return to standard settings\n```\n\n\n# Saving plot\n```{r saving base plots}\n# Option 1. Click on export in RStudio\n\n# Option 2. Use a graphics device\n?Devices # see list of graphics devices\n\n# Step 1. turn on graphics device\n# In this case I am using pdf\npdf(file = \"output/height-histogram.pdf\") \n# Step 2. Run plotting code\nhist(csurvey$Height) \n\n# Step 3. Turn of graphics device\ndev.off()\n```\n\n# Exercise 1\n```{r exercise 1}\n# For this exercise will use the GSS7402 dataset\nlibrary(AER)\ndata(\"GSS7402\")\n?GSS7402 # to learn about the dataset\n# It might be easier to work with a shorter variable name \ngss <- GSS7402\n\n# 1. Use base graphics to create a boxplot for education\n\n# 2.  Create a boxplot for education split by year\n\n# 3. Add some elements to the plot\n#    (a) x and y labels,\n#    (b) a red horizontal line at 12 years of education\n\n# 4. Save the previous plot as a pdf in the output directory.\n#    Paste the document into a word processor (e.g., MS Word)\n```\n\n\n# Answer 1\n```{r answers for exercise 1}\n# For this exercise will use the GSS7402 dataset\nlibrary(AER)\ndata(\"GSS7402\")\n?GSS7402 # to learn about the dataset\n# It might be easier to work with a shorter variable name \ngss <- GSS7402\n\n# 1. Use base graphics to create a boxplot for education\nboxplot(gss$education)\n\n# 2.  Create a boxplot for education split by year\nboxplot(gss$education ~ gss$year)\n\n# 3. Add some elements to the plot\n#    (a) x and y labels,\n#    (b) a red horizontal line at 12 years of education\nboxplot(gss$education ~ gss$year, xlab = \"Year\", ylab = \"Education (years)\")\nabline(h = 12, col=\"red\")\n\n# 4. Save the previous plot as a pdf in the output directory.\n#    Paste the document into a word processor (e.g., MS Word)\npdf(\"output/graphics-boxplot.pdf\")\nboxplot(gss$education ~ gss$year, xlab = \"Year\", ylab = \"Education (years)\")\nabline(h = 12, col=\"red\")\ndev.off()\n```\n\n# Lattice Plots\n```{r lattice plots}\nlibrary(lattice)\nhead(csurvey)\nxyplot(Wr.Hnd ~ NW.Hnd, csurvey)\nxyplot(Wr.Hnd ~ NW.Hnd | Sex, csurvey)\nxyplot(Wr.Hnd ~ NW.Hnd | Sex + W.Hnd, csurvey)\nbarchart(Wr.Hnd ~  Sex, csurvey)\n\n# saving lattice plots\n# same as base but you need to print the plot\npdf(file = \"output/lattice-plot.pdf\") \n# Step 2. Run plotting code with print\nprint(xyplot(Wr.Hnd ~ NW.Hnd, csurvey))\n\n# Step 3. Turn of graphics device\ndev.off()\n```\n\n\n# ggplot2\n```{r ggplot2}\nlibrary(ggplot2)\n\n# Let's look at the ais dataset\nlibrary(DAAG)\ndata(ais)\n?ais\n\n# See the Rstudio ggplot2 cheatsheet \n# and the ggplot2 documentation: http://docs.ggplot2.org/current/\n\n# specify the data frame and the mapping of variables to plot attributes\n\n# scatter plot\n# 1. supply a data.frame\n# 2. add aesthetic mapping between variables in data.frame\n#    and \nggplot(ais, aes(x = ht, y = wt)) + geom_point()\n\nggplot(ais, aes(x = ht, y= wt, colour = sex)) + \n    geom_point() + \n    geom_smooth() + \n    xlab(\"Height\") +\n    ylab(\"Weight\")\n\nggsave(\"output/height_weight.pdf\", width = 5, height = 5) # save last plot\n    \n# distribution\np <- ggplot(ais, aes(x = bmi)) \np + geom_histogram() #histogram\np + geom_density(fill = \"blue\") # density plot\n\n# Show group differences\np <- ggplot(ais, aes(x = sport, y = bmi)) \np + geom_boxplot()\n\n# Scatterplot matrix\n# Something like pairs and pairs.panels\nlibrary(GGally)\nGGally::ggpairs(ais[1:4])\n```\n\n\n\n# Data Manipulation\n```{r data manipualtion}\n# We'll work with the GSS dataset and the bfi dataset\nlibrary(AER)\ndata(\"GSOEP9402\")\ngss <- GSOEP9402\n\nlibrary(psych)\ndata(bfi)\ncbfi <- na.omit(bfi)\ndput(names(cbfi))\nv <- list()\nv$items <- c(\"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \n    \"E1\", \"E2\", \"E3\", \"E4\", \"E5\", \"N1\", \"N2\", \"N3\", \"N4\", \"N5\", \"O1\", \n    \"O2\", \"O3\", \"O4\", \"O5\")\n\n# Aggegate statistic over grouping variable\naggregate(A1 ~ gender, cbfi, function(X) mean(X))\naggregate(A1 ~ gender, cbfi, mean)\naggregate(cbfi$A1, list(gender=cbfi$gender), function(X) mean(X))\n\n# calculate statistic on each row of data\ncbfi$average_response <- apply(cbfi[ v$items], 1, mean)\ncbfi$extreme_response <- apply(cbfi[ v$items], 1, function(X) sum(X %in% c(1,5)))\nhist(cbfi$extreme_response)\n\n# psych::scoreItems to score personality tests with a given key\n# or see the final personality example in session 4\n      \n# calculate statistic for each element in a vector, list or column of \n# a data.frame\n\n# lapply returns a list\nlapply(cbfi[, v$items], function(X) mean(X))\n# sapply attempt to simplifies the result (e.g., to a vector)\nsapply(cbfi[, v$items], function(X) mean(X))\n\n# Most operations are vectorised anyway\nx <- 1:10\nx * 2\n# But this can be useful when they are not\nsapply(x, function(X) X * 2)\n\n# Works on lists\nfits <- list()\nfits$fit1 <- lm(income ~ gender, gss)\nfits$fit2 <- lm(income ~ gender + size, gss)\nfits$fit3 <- lm(income ~ gender + size + memployment, gss)\nsfits <- lapply(fits, summary)\n# sfits\n\n# Example, use it to extract same property from \n# set of statistical models.\n# See how to extract one element with code completion\nsfits$fit1$adj.r.squared \n# then apply elementwise\nsapply(sfits, function(X) X$adj.r.squared)\n\n\n# re-order a data.fraame\n# decreasing\nx <- cbfi[ order(cbfi$extreme_response, decreasing = TRUE), ]\nhead(x)\n# or increasing\nx <- cbfi[ order(cbfi$extreme_response), ]\nhead(x)\n\n\n# Extract subsets of data based on condition\n# Use logical vector in the rows\ncbfi_cleaned <- cbfi[ cbfi$extreme_response < 25, ]\n\n# Extract subset of variables\n# subset of column names\ncbfi_items <- cbfi[, v$items]\n\n# or subset provides another option\nx <- subset(cbfi, subset = extreme_response < 25, select = v$items)\nhead(x); nrow(x); nrow(cbfi)\n\n\nmat <- matrix(c(1,2,\n                3,4), nrow= 2)\nmat\n# Add columns\nmat <- cbind(mat, c(8,8))\nmat\n\n# add rows\nmat <- rbind(mat, c(9,9,9))\nmat\n\n######################################\n# Merge \n# Merge on common variable\n# Let's create an aggregate variable\n# to merge into the lower level data\nmeankids <- aggregate(kids ~ birthyear,  gss, mean)\nnames(meankids) <- c(\"birthyear\", \"mean_kids\")\n\ntemp <- merge(gss, meankids)\ndim(temp)\ndim(gss) \n# it's good to check that the merge worked before\n# overriding the original data.frame\ngss <- merge(gss, meankids)\nhead(gss)\n\n\n\n######################################\n# Reshape\n# http://www.ats.ucla.edu/stat/r/faq/reshape.htm\n# With longitudinal data we sometimes want to\n# reshape from wide to long and long to wide\nlongfile <- aggregate(income ~ birthyear + kids,  gss, mean)\nhead(longfile)\n\nwidefile <- reshape(longfile, timevar = \"kids\", \n        idvar = \"birthyear\", direction = \"wide\")\nwidefile\n\nback2long <- reshape(widefile, \n                     times =  c(\"income.1\", \"income.2\", \"income.3\", \n                         \"income.4\",  \"income.5\", \"income.6\"),\n                         direction = \"long\")\nhead(back2long)\n\n\n#################################################\n# The Hadleyverse\n# http://had.co.nz/\n\n# Hadley Wickham is a celebrity in the R world \n# and has developed many new packages that attempt\n# to make R more user friendly.\n# Most prominently these include the graphics package\n# ggplot2 \n# as well as several for data manipulation including\n# dplyr, tidyr\n# You may wish to examine the RStudio Data Wrangling cheat sheet.\n# The above data manipulation methods are built into base R.\n# Hadley's packages do similar things but you may find them more \n# elegant and consistent.\n\n# examples\nlibrary(dplyr)\nhead(iris)\n\n# A bit like aggregate\ndplyr::summarise(cbfi[, v$items], \n                 mean_A1 = mean(A1), sd_A1 = sd(A1))\n\n# Similar to sapply but returns a data.frame\ndplyr::summarise_each(cbfi[, v$items], funs(sd))\n```\n\n\n# Exercise 2\n```{r exercise 2}\nlibrary(psych)\ndata(bfi)\ncbfi <- na.omit(bfi)\ndput(names(cbfi))\nv <- list()\nv$items <- c(\"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \n    \"E1\", \"E2\", \"E3\", \"E4\", \"E5\", \"N1\", \"N2\", \"N3\", \"N4\", \"N5\", \"O1\", \n    \"O2\", \"O3\", \"O4\", \"O5\")\n\n# 1. Get the median of all items in cbfi\n\n# 2. Get the number of times each participant gave \n#    the response of 3 and assign this to a new variable\n\n# 3. Produce frequency counts for each each\n\n# 4. Create a new dataset excluding those over 50\n#    and those under 18\n\n# 5. Get the mean of each item by age from this younger sample\n\n\n```\n\n# Answers 2\n```{r Answers for exercise 2}\nlibrary(psych)\ndata(bfi)\ncbfi <- na.omit(bfi)\ndput(names(cbfi))\nv <- list()\nv$items <- c(\"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"C1\", \"C2\", \"C3\", \"C4\", \"C5\", \n    \"E1\", \"E2\", \"E3\", \"E4\", \"E5\", \"N1\", \"N2\", \"N3\", \"N4\", \"N5\", \"O1\", \n    \"O2\", \"O3\", \"O4\", \"O5\")\n\n# 1. Get the median of all items in cbfi\nsapply(cbfi[ ,v$items], median)\n\n# 2. Get the number of times each participant gave \n#    the response of 3 and assign this to a new variable\ncbfi$response3 <- apply(cbfi[ ,v$items],1,  function(X) sum(X == 3))\n\n# 3. Produce frequency counts for each each\ntable(cbfi$age)\n\n# 4. Create a new dataset excluding those over 50\n#    and those under 18\ncbfi_younger <- cbfi[ cbfi$age <= 50 & cbfi$age >= 18, ]\n\n# 5. Get the mean of each item by age from this younger sample\nx <- aggregate(cbfi_younger[,v$items], list(age = cbfi_younger$age), mean)\n\n\n```\n\n\n\n\n",
    "created" : 1467782185862.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "220056801",
    "id" : "D4F27015",
    "lastKnownWriteTime" : 1435038001,
    "path" : "~/teaching/r-training/training-materials/training-exercises/2-graphics-data-manipluation.rmd",
    "project_path" : "2-graphics-data-manipluation.rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_markdown"
}